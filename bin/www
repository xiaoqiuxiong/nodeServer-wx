#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

var mongoose = require('mongoose')
var db = "mongodb://localhost/nodeServer"

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//连接数据库
// mongoose.connect(db)
// let maxConnectTimes = 0
// //增加数据库监听事件
// mongoose.connection.on('disconnected', () => {
//     console.log('***********数据库断开***********')
//     if (maxConnectTimes <= 3) {
//         maxConnectTimes++
//         mongoose.connect(db)
//     } else {
//         throw new Error('数据库出现问题，程序无法搞定，请人为修理.....')
//     }

// })

// mongoose.connection.on('error', (err) => {
//     console.log('***********数据库错误')
//     if (maxConnectTimes <= 3) {
//         maxConnectTimes++
//         mongoose.connect(db)
//     } else {
//         throw new Error('数据库出现问题，程序无法搞定，请人为修理.....')
//     }
// })
// //链接打开的时
// mongoose.connection.once('open', () => {
//     console.log('MongoDB connected successfully')
// })
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}